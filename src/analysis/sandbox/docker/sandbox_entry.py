"""
Run user-provided code in a sandboxed environment.
"""
import json, io, contextlib, importlib.util, traceback, os, sys, types, uuid, inspect
from pathlib import Path
import pandas as pd 

SAFE_BUILTINS = {
    "abs": abs, "min": min, "max": max, "sum": sum,
    "range": range, "len": len, "print": print,
    "int": int, "float": float, "str": str,
    "list": list, "dict": dict, "tuple": tuple, "set": set,
    "enumerate": enumerate, "zip": zip, "sorted": sorted, "reversed": reversed,
    "any": any, "all": all, "round": round,
    "__import__": __import__,
}


def run_user(code_text: str, local_ctx: dict):
    """
    Execute user code in a controlled environment with restricted builtins.
    Returns:
        stdout (str): The standard output generated by the code.
        err (str): Any errors encountered during execution.
        g (dict): The execution context including any output data.
    """
    g = {"__builtins__": SAFE_BUILTINS, **local_ctx}
    out_buf = io.StringIO()
    err = ""
    try:
        with contextlib.redirect_stdout(out_buf):
            exec(code_text, g)
    except Exception:
        err = traceback.format_exc()
    return out_buf.getvalue(), err, g.get("output_data")

def main():
    """
    Main entry point for sandbox execution. Reads user code and input data,
    executes the code, and writes the result to a JSON file.
    """
    code_path = Path(os.environ["USER_CODE"])
    csv_path  = Path(os.environ["CSV_PATH"])
    out_dir   = Path("/workspace/out")
    out_dir.mkdir(exist_ok=True)

    import pandas as pd
    df = pd.read_csv(csv_path)

    code_text = code_path.read_text()
    try:
        stdout, error, ret_obj = run_user(code_text, {"df": df})
    except Exception:
        stdout, ret_obj = "", None
        error = traceback.format_exc()
    finally:
        # Save results
        pngs = list(Path("/workspace").rglob("*.png"))
        for p in pngs:
            target = out_dir / p.name
            try:
                p.replace(target)
            except Exception:
                pass
        plot_files = [str(p) for p in out_dir.glob("*.png")]
        result = dict(stdout=stdout, error=error,
                      return_obj=ret_obj, plots=plot_files)
        (out_dir / "result.json").write_text(json.dumps(result, ensure_ascii=False))

if __name__ == "__main__":
    main()
